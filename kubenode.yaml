heat_template_version: 2013-05-23

description: >
  This is a nested stack that defines a single Kubernetes minion,
  based on a vanilla Fedora 20 cloud image.  This stack is included by
  a ResourceGroup resource in the parent template (kubecluster.yaml).

parameters:

  server_image:
    type: string
    default: centos-7-atomic-20150120
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  external_network:
    type: string
    description: uuid of a network to use for floating ip addresses

  kube_allow_priv:
    type: string
    description: >
      whether or not kubernetes should permit privileged containers.
    default: false
    constraints:
      - allowed_values: [true, false]

  docker_volume_size:
    type: number
    description: >
      size of a cinder volume to allocate to docker for container/image
      storage
    default: 25

  wait_condition_timeout:
    type: number
    description : >
      timeout for the Wait Conditions
    default: 6000

  # The following are all generated in the parent template.
  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.
  fixed_network:
    type: string
    description: Network from which to allocate fixed addresses.
  fixed_subnet:
    type: string
    description: Subnet from which to allocate fixed addresses.
  metadata:
    type: json


resources:

  node_wait_handle:
    type: OS::Heat::WaitConditionHandle

  node_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: kube_node
    properties:
      handle: {get_resource: node_wait_handle}
      timeout: {get_param: wait_condition_timeout}

  secgroup_all_open:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params.yaml}
          params:
            "$KUBE_ALLOW_PRIV": {get_param: kube_allow_priv}
            "$KUBE_MASTER_IP": {get_param: kube_master_ip}
            "$DOCKER_VOLUME": {get_resource: docker_volume}

  add_to_docker_group:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/add-to-docker-group.sh}

  configure_docker_storage:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/configure-docker-storage.sh}

  configure_kubernetes_minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/configure-kubernetes-minion.sh}

  docker_service:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/docker-service.yaml}

  enable_services:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/enable-services-minion.sh}

  disable_selinux:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/disable-selinux.sh}

  node_wc_notify:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash -v
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: {get_attr: ['node_wait_handle', 'curl_cli']}

  kube_node_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: disable_selinux}
        - config: {get_resource: write_heat_params}
        - config: {get_resource: add_to_docker_group}
        - config: {get_resource: configure_docker_storage}
        - config: {get_resource: configure_kubernetes_minion}
        - config: {get_resource: docker_service}
        - config: {get_resource: enable_services}
        - config: {get_resource: node_wc_notify}

  kube_node_eth0:
    type: "OS::Neutron::Port"
    properties:
      network: {get_param: fixed_network}
      security_groups:
        - {get_resource: secgroup_all_open}
      fixed_ips:
        - subnet_id: {get_param: fixed_subnet}

  kube_node:
    type: OS::Nova::Server
    properties:
      image: {get_param: server_image}
      flavor: {get_param: server_flavor}
      key_name: {get_param: ssh_key_name}
      networks:
      - port: {get_resource: kube_node_eth0}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: kube_node_init}

  kube_node_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: kube_node_eth0}

  docker_volume:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: docker_volume_size}

  docker_volume_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: {get_resource: kube_node}
      volume_id: {get_resource: docker_volume}

outputs:

  kube_node_ip:
    value: {get_attr: [kube_node_eth0, fixed_ips, 0, ip_address]}
  
  kube_node_external_ip:
    value: {get_attr: [kube_node_floating, floating_ip_address]}

